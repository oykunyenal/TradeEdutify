// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradeEdutify.Persistence.Context;

#nullable disable

namespace TradeEdutify.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradeEdutify.Domain.Entities.Portfolio", b =>
                {
                    b.Property<Guid>("PortfolioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ShareID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("PortfolioID");

                    b.HasIndex("ShareID");

                    b.HasIndex("UserID");

                    b.ToTable("Portfolio");
                });

            modelBuilder.Entity("TradeEdutify.Domain.Entities.Share", b =>
                {
                    b.Property<Guid>("ShareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ShareID");

                    b.ToTable("Share");
                });

            modelBuilder.Entity("TradeEdutify.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShareID")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalOperationPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("TradeType")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("TransactionID");

                    b.HasIndex("ShareID");

                    b.HasIndex("UserID");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("TradeEdutify.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TradeEdutify.Domain.Entities.Portfolio", b =>
                {
                    b.HasOne("TradeEdutify.Domain.Entities.Share", "Share")
                        .WithMany("Portfolios")
                        .HasForeignKey("ShareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeEdutify.Domain.Entities.User", "User")
                        .WithMany("Portfolios")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Share");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradeEdutify.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("TradeEdutify.Domain.Entities.Share", null)
                        .WithMany("Transactions")
                        .HasForeignKey("ShareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeEdutify.Domain.Entities.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeEdutify.Domain.Entities.Share", b =>
                {
                    b.Navigation("Portfolios");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TradeEdutify.Domain.Entities.User", b =>
                {
                    b.Navigation("Portfolios");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
